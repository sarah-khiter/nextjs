// pages/index.tsx

import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import React, { useState, useEffect } from "react";
import { GoogleMap, useLoadScript, Marker } from "@react-google-maps/api";
import OPTIONS from "@/utils/options";
import MAPCONTAINERSTYLES from "@/utils/mapstyle";
import SearchBar from "@/components/SearchBar";
import { Box } from "@chakra-ui/react";
import COORDONNEES_REGION from "@/utils/villes";
import axios from "axios";

interface CityData {
  lat: number;
  lng: number;
  temps: string;
  degres: number;
  ville: string; // Assuming there's a property 'ville' in your data
}

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { isLoaded } = useLoadScript({
    googleMapsApiKey: "AIzaSyDbr6FgqPsctO5kXmIFoYL7X7TuaXAGX_o",
  });

  const [donnees, setDonnees] = useState<CityData[] | null>(null);
  const [filteredDonnees, setFilteredDonnees] = useState<CityData[] | null>(null);

  const fetchData = async () => {
    try {
      const requests = COORDONNEES_REGION.map(async (element) => {
        const response = await axios.get(
          `https://api.openweathermap.org/data/2.5/weather?q=${element.ville}&units=metric&lang=fr&appid=dcea80cba359684c8af702c1b42982ba`
        );

        const cityData: CityData = {
          lat: element.lat,
          lng: element.lng,
          temps: response.data.weather[0].icon,
          degres: Math.floor(response.data.main.temp),
          ville: element.ville,
        };

        return cityData;
      });

      const result = await Promise.all(requests);
      setDonnees(result);
      setFilteredDonnees(result);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSearch = (query: string) => {
    if (donnees) {
      if (!query) {
        setFilteredDonnees(null);
      } else {
        const filteredData = donnees.filter((item) =>
          item.ville && item.ville.toLowerCase().includes(query.toLowerCase())
        );
        setFilteredDonnees(filteredData);
      }
    }
  };

  useEffect(() => {
    console.log(filteredDonnees);
  }, [filteredDonnees]);

  if (!isLoaded) return <div>Loading...</div>;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        {/* rest of the Head component remains the same */}
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Box p="4">
          <SearchBar onSearch={handleSearch} />
        </Box>
        <GoogleMap
          zoom={6}
          center={{ lat: 46.6167, lng: 1.85 }}
          mapContainerStyle={MAPCONTAINERSTYLES}
          options={OPTIONS}
        >
          {filteredDonnees
            ? filteredDonnees.map((v: CityData, k: number) => (
                <Marker
                  key={k}
                  position={{ lat: v.lat, lng: v.lng }}
                  icon={{
                    url: `https://openweathermap.org/img/wn/${v.temps}@2x.png`,
                    scaledSize: new window.google.maps.Size(60, 60),
                    anchor: new window.google.maps.Point(30, 30),
                  }}
                  label={{
                    text: `${v.degres}°`,
                    fontWeight: "500",
                  }}
                />
              ))
            : donnees
            ? donnees.map((v: CityData, k: number) => (
                <Marker
                  key={k}
                  position={{ lat: v.lat, lng: v.lng }}
                  icon={{
                    url: `https://openweathermap.org/img/wn/${v.temps}@2x.png`,
                    scaledSize: new window.google.maps.Size(60, 60),
                    anchor: new window.google.maps.Point(30, 30),
                  }}
                  label={{
                    text: `${v.degres}°`,
                    fontWeight: "500",
                  }}
                />
              ))
            : null}
        </GoogleMap>
      </main>
    </div>
  );
}
